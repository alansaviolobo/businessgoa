<?php
// $Id: image_upload.module,v 1.1.2.3 2009/01/07 13:19:53 bojanz Exp $

/**
 * @file
 * File-handling and attaching files to nodes.
 *
 */

/**
 * Implementation of hook_help().
 */
function image_upload_help($path, $arg) {
  switch ($path) {
    case 'admin/help#image_upload':
      $output = '<p>'. t('The image upload module allows users to upload images to the site. The images are attached to nodes.') .'</p>';
      $output .= '<p>'. t('Users with the upload images permission can upload images to nodes. Uploads may be enabled for specific content types on the content types settings page. Each user role can be customized to limit or control the file size of uploads, or the maximum dimension of images.') .'</p>';
      return $output;
    case 'admin/settings/image_upload':
      return '<p>'. t('Users with the <a href="@permissions">upload images permission</a> can upload images. . Users with the <a href="@permissions">view uploaded images permission</a> can view uploaded images. You can choose which post types can take image uploads, as well as assign categories to them on the <a href="@types">content types settings</a> page.', array('@permissions' => url('admin/user/permissions'), '@types' => url('admin/settings/types'))) .'</p>';
  }
}

/**
 * Implementation of hook_views_api().
 */
function image_upload_views_api() {
  return array('api' => '2.0');
}

/**
 * Implementation of hook_theme()
 */
function image_upload_theme() {
  return array(
    'image_upload_form_current' => array(
      'arguments' => array('form' => NULL),
    ),
    'image_upload_form_new' => array(
      'arguments' => array('form' => NULL),
    ),
    'image_upload_image' => array(
      'arguments' => array('nid'=> NULL, 'thumbpath' => NULL, 'filepath' => NULL, 'caption' => 'Image'),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function image_upload_perm() {
  return array('upload images', 'view uploaded images');
}

/**
 * Implementation of hook_menu().
 */
function image_upload_menu() {
  $items['image_upload/js'] = array(
    'page callback' => 'image_upload_js',
    'access arguments' => array('upload images'),
    'type' => MENU_CALLBACK,
  );
  $items['image_upload/js_remove'] = array(
    'page callback' => 'image_upload_js_remove',
    'access arguments' => array('upload images'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/image_upload'] = array(
    'title' => 'Image uploads',
    'description' => 'Control how images may be attached to content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_upload_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'image_upload.admin.inc',
  );
  return $items;
}

function image_upload_menu_alter(&$items) {
  $items['system/files']['access arguments'] = array('view uploaded images');
}

/**
 * Determine the limitations on files that a given user may upload. The user
 * may be in multiple roles so we select the most permissive limitations from
 * all of their roles.
 *
 * @param $user
 *   A Drupal user object.
 * @return
 *   An associative array with the following keys:
 *     'extensions'
 *       A white space separated string containing all the file extensions this
 *       user may upload.
 *     'file_size'
 *       The maximum size of a file upload in bytes.
 *     'user_size'
 *       The total number of bytes for all for a user's files.
 *     'resolution'
 *       A string specifying the maximum resolution of images.
 */
function _image_upload_file_limits($user) {
  $file_limit = variable_get('image_upload_uploadsize_default', 1);
  $user_limit = variable_get('image_upload_usersize_default', 1);
  $all_extensions = explode(' ', variable_get('image_upload_extensions_default', 'jpg jpeg gif png bmp'));
  foreach ($user->roles as $rid => $name) {
    $extensions = variable_get("image_upload_extensions_$rid", variable_get('image_upload_extensions_default', 'jpg jpeg gif png bmp'));
    $all_extensions = array_merge($all_extensions, explode(' ', $extensions));

    // A zero value indicates no limit, take the least restrictive limit.
    $file_size = variable_get("image_upload_uploadsize_$rid", variable_get('image_upload_uploadsize_default', 1)) * 1024 * 1024;
    $file_limit = ($file_limit && $file_size) ? max($file_limit, $file_size) : 0;

    $user_size = variable_get("image_upload_usersize_$rid", variable_get('image_upload_usersize_default', 1)) * 1024 * 1024;
    $user_limit = ($user_limit && $user_size) ? max($user_limit, $user_size) : 0;
  }
  $all_extensions = implode(' ', array_unique($all_extensions));
  return array(
    'extensions' => $all_extensions,
    'file_size' => $file_limit,
    'user_size' => $user_limit,
    'resolution' => variable_get('image_upload_max_resolution', 0),
  );
}

/**
 * Implementation of hook_file_download().
 */
function image_upload_file_download($file) {
  $file = file_create_path($file);
  $result = db_query("SELECT f.* FROM {files} f INNER JOIN {image_upload} u ON f.fid = u.fid WHERE filepath = '%s'", $file);
  if ($file = db_fetch_object($result)) {
    if (!user_access('view uploaded images')) {
      return -1;
    }

    return array(
      'Content-Type: '. $file->filemime,
      'Content-Length: '. $file->filesize,
    );
  }
}

/**
 * Save new uploads and store them in the session to be associated to the node
 * on image_upload_save.
 *
 * @param $node
 *   A node object to associate with uploaded files.
 */
function image_upload_node_form_submit($form, &$form_state) {
  global $user;

  $limits = _image_upload_file_limits($user);
  $validators = array(
    'file_validate_extensions' => array($limits['extensions']),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size'], $limits['user_size']),
    'file_validate_is_image' => array(),
  );

  // Save new file uploads.
  if (($user->uid != 1 || user_access('upload images')) && ($file = file_save_upload('image_upload', $validators, file_directory_path()))) {
    $file->description = $file->filename;
    $file->weight = 0;

    // generate the thumbnail and save it to the files table

    $thumb_size = variable_get('image_upload_thumbnail_resolution', '100x100');
    list($thumb_width, $thumb_height)= explode('x', $thumb_size);
    $file->thumbpath = _image_upload_create_thumbname($file->filepath);

    image_scale($file->filepath, $file->thumbpath, $thumb_width, $thumb_height);

    chmod($file->filepath, 0644); // BUGFIX: force the image to be readable.

    // Done, save to session
    $_SESSION['image_upload_files'][$file->fid] = $file;
  }


  // Attach session files to node.
  if (!empty($_SESSION['image_upload_files'])) {
    foreach ($_SESSION['image_upload_files'] as $fid => $file) {
      if (!isset($form_state['values']['images'][$fid]['filepath'])) {
        $form_state['values']['images'][$fid] = (array)$file;
      }
    }
  }


  // Order the form according to the set file weight values.
  if (!empty($form_state['values']['images'])) {
    $microweight = 0.001;
    foreach ($form_state['values']['images'] as $fid => $file) {
      if (is_numeric($fid)) {
        $form_state['values']['images'][$fid]['#weight'] = $file['weight'] + $microweight;
        $microweight += 0.001;
      }
    }
    uasort($form_state['values']['images'], 'element_sort');
  }
}

function image_upload_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['image_upload'] = array(
      '#type' => 'fieldset',
      '#title' => t('Image Upload'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['image_upload']['image_upload_enabled'] = array(
      '#type' => 'radios',
      '#title' => t('Use Image Upload for this node.'),
      '#default_value' => variable_get('image_upload_enabled_'. $form['#node_type']->type, 1),
      '#options' => array(t('No'), t('Yes')),
    );

    $terms = _image_upload_get_terms();

    $i = 0;
    foreach($terms as $tid => $term_name) {
      $form['image_upload']['image_upload_category_'. $tid] = array(
      '#type' => 'checkbox',
      '#title' => t($term_name),
      '#default_value' => variable_get('image_upload_category_'. $tid .'_'. $form['#node_type']->type, 0),
      );

      if ($i == 0) {
        $form['image_upload']['category_'. $tid]['#prefix'] = '<b> Categories used </b>';
      }

      $i++;
    }
  }

  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];
    if ($form['type']['#value'] .'_node_form' == $form_id && variable_get("image_upload_$node->type", TRUE)) {
      // Attachments fieldset
      $form['image_uploads'] = array(
        '#type' => 'fieldset',
        '#access' => user_access('upload images'),
        '#title' => t('Image uploads'),
        '#collapsible' => TRUE,
        '#collapsed' => empty($node->images),
        '#description' => t('Uploaded images are not permanently attached until you save this post.'),
        '#prefix' => '<div class="attachments">',
        '#suffix' => '</div>',
        '#weight' => 30,
      );

      // Wrapper for fieldset contents (used by ahah.js).
      $form['image_uploads']['image_wrapper'] = array(
        '#prefix' => '<div id="image-attach-wrapper">',
        '#suffix' => '</div>',
      );

      // Make sure necessary directories for image_upload.module exist and are
      // writable before displaying the attachment form.
      $path = file_directory_path();
      $temp = file_directory_temp();
      // Note: pass by reference
      if (!file_check_directory($path, FILE_CREATE_DIRECTORY) || !file_check_directory($temp, FILE_CREATE_DIRECTORY)) {
        $form['image_uploads']['#description'] =  t('Image uploads are disabled. The file directories have not been properly configured.');
        if (user_access('administer site configuration')) {
          $form['image_uploads']['#description'] .= ' '. t('Please visit the <a href="@admin-file-system">file system configuration page</a>.', array('@admin-file-system' => url('admin/settings/file-system')));
        }
        else {
          $form['image_uploads']['#description'] .= ' '. t('Please contact the site administrator.');
        }
      }
      else {
        $form['image_uploads']['image_wrapper'] += _image_upload_form($node);
        $form['#attributes']['enctype'] = 'multipart/form-data';
      }
    }
    $form['#submit'][] = 'image_upload_node_form_submit';
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function image_upload_nodeapi(&$node, $op, $teaser) {
  switch ($op) {

    case 'load':
      $output = '';
      if (variable_get("image_upload_$node->type", 1) == 1) {
        $output['images'] = image_upload_load($node);
        return $output;
      }
      break;

    case 'prepare':
      // Initialize $_SESSION['image_upload_files'] if no post occurred.
      // This clears the variable from old forms and makes sure it
      // is an array to prevent notices and errors in other parts
      // of upload.module.
      if (!$_POST) {
        $_SESSION['image_upload_files'] = array();
      }
      break;

    case 'insert':
    case 'update':
      if (user_access('upload images')) {
        image_upload_save($node);
      }
      break;

    case 'delete':
      image_upload_delete($node);
      break;

    case 'delete revision':
      image_upload_delete_revision($node);
      break;
  }
}

/**
 * Determine how much disk space is occupied by a user's uploaded files.
 *
 * @param $uid
 *   The integer user id of a user.
 * @return
 *   The amount of disk space used by the user in bytes.
 */
function image_upload_space_used($uid) {
  return file_space_used($uid);
}

/**
 * Determine how much disk space is occupied by uploaded files.
 *
 * @return
 *   The amount of disk space used by uploaded files in bytes.
 */
function image_upload_total_space_used() {
  return db_result(db_query('SELECT SUM(f.filesize) FROM {files} f INNER JOIN {image_upload} u ON f.fid = u.fid'));
}

function image_upload_save(&$node) {
  if (empty($node->images) || !is_array($node->images)) {
    return;
  }

  foreach ($node->images as $fid => $file) {
    // Convert file to object for compatibility
    $file = (object)$file;

    // Remove file. Process removals first since no further processing
    // will be required.
    if (!empty($file->remove)) {
      db_query('DELETE FROM {image_upload} WHERE fid = %d AND vid = %d', $fid, $node->vid);

      // If the file isn't used by any other revisions delete it.
      $count = db_result(db_query('SELECT COUNT(fid) FROM {image_upload} WHERE fid = %d', $fid));
      if ($count < 1) {
        file_delete($file->filepath);
        file_delete($file->thumbpath);
        db_query('DELETE FROM {files} WHERE fid = %d', $fid);
      }

      // Remove it from the session in the case of new uploads,
      // that you want to disassociate before node submission.
      unset($_SESSION['image_upload_files'][$fid]);
      // Move on, so the removed file won't be added to new revisions.
      continue;
    }

    // Create a new revision, or associate a new file needed.
    if (!empty($node->old_vid) || isset($_SESSION['image_upload_files'][$fid])) {
      db_query("INSERT INTO {image_upload} (fid, nid, vid, tid, description, weight, thumbpath) VALUES (%d, %d, %d, %d, '%s', %d, '%s')", $file->fid, $node->nid, $node->vid, $file->tid, $file->description, $file->weight, $file->thumbpath);
      file_set_status($file, FILE_STATUS_PERMANENT);
    }
    // Update existing revision.
    else {
      db_query("UPDATE {image_upload} SET description = '%s', tid = %d, weight = %d WHERE fid = %d AND vid = %d", $file->description, $file->tid, $file->weight, $file->fid, $node->vid);
      file_set_status($file, FILE_STATUS_PERMANENT);
    }
  }
  // Empty the session storage after save. We use this variable to track files
  // that haven't been related to the node yet.
  unset($_SESSION['image_upload_files']);
}

function image_upload_delete($node) {
  $files = array();

  $result = db_query('SELECT DISTINCT f.* FROM {image_upload} u INNER JOIN {files} f ON u.fid = f.fid WHERE u.nid = %d', $node->nid);
  while ($file = db_fetch_object($result)) {
    $files[$file->fid] = $file;
  }

  foreach ($files as $fid => $file) {
    // Delete all files associated with the node
    db_query('DELETE FROM {files} WHERE fid = %d', $fid);

    file_delete($file->filepath);
    file_delete(_image_upload_create_thumbname($file->filepath));
  }

  // Delete all file revision information associated with the node
  db_query('DELETE FROM {image_upload} WHERE nid = %d', $node->nid);
}

function image_upload_delete_revision($node) {
  if (is_array($node->images)) {
    foreach ($node->images as $file) {
      // Check if the file will be used after this revision is deleted
      $count = db_result(db_query('SELECT COUNT(fid) FROM {image_upload} WHERE fid = %d', $file->fid));

      // if the file won't be used, delete it
      if ($count < 2) {
        db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);

        file_delete($file->filepath);
        file_delete(_image_upload_create_thumbname($file->filepath));
      }
    }
  }

  // delete the revision
  db_query('DELETE FROM {image_upload} WHERE vid = %d', $node->vid);
}

function _image_upload_form($node) {
  global $user;

  $form = array(
    '#theme' => 'image_upload_form_new',
    '#cache' => TRUE,
  );

  if (!empty($node->images) && is_array($node->images)) {
    $form['images']['#theme'] = 'image_upload_form_current';
    $form['images']['#tree'] = TRUE;
    $form['images']['nid'] = array('#type' => 'value',  '#value' => $node->nid);

    $terms = array('Please Select');
    $terms += _image_upload_form_get_terms($node->type);

    foreach ($node->images as $key => $file) {
      $file = (object)$file;
      $description = file_create_url($file->filepath);
      $description = "<small>". check_plain($description) ."</small>";

      $form['images'][$key]['tid'] = array('#type' => 'select', '#default_value' => $file->tid, '#options' => $terms);
      $form['images'][$key]['description'] = array('#type' => 'textfield', '#default_value' => !empty($file->description) ? $file->description : $file->filename, '#maxlength' => 256, '#description' => $description );
      //$form['images'][$key]['size'] = array('#value' => format_size($file->filesize));
      $form['images'][$key]['remove'] = array('#type' => 'checkbox', '#default_value' => !empty($file->remove));
      $form['images'][$key]['weight'] = array('#type' => 'weight', '#delta' => count($node->images), '#default_value' => $file->weight);
      $form['images'][$key]['filename'] = array('#type' => 'value',  '#value' => $file->filename);
      $form['images'][$key]['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);
      $form['images'][$key]['thumbpath'] = array('#type' => 'value',  '#value' => $file->thumbpath);
      $form['images'][$key]['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);
      $form['images'][$key]['filesize'] = array('#type' => 'value',  '#value' => $file->filesize);
      $form['images'][$key]['fid'] = array('#type' => 'value',  '#value' => $file->fid);
    }

    $form['images']['delete']['js_delete'] = array(
      '#type' => 'button',
      '#value' => t('Delete'),
      '#name' => 'image_delete',
      '#ahah' => array(
        'path' => 'image_upload/js_remove',
        'wrapper' => 'image-attach-wrapper',
        'progress' => array('type' => 'throbber'),
      ),
      '#submit' => array('node_form_submit_build_node'),
    );
  }

  if (user_access('upload images')) {
    $limits = _image_upload_file_limits($user);
    $form['new']['#weight'] = 10;
    $form['new']['image_upload'] = array(
      '#type' => 'file',
      '#title' => t('Attach new image'),
      '#size' => 40,
      '#description' => ($limits['resolution'] ? t('Images are larger than %resolution will be resized. ', array('%resolution' => $limits['resolution'])) : '') . t('The maximum upload size is %filesize. Only images with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),
    );
    $form['new']['image_attach'] = array(
      '#type' => 'submit',
      '#value' => t('Upload'),
      '#name' => 'image_attach',
      '#ahah' => array(
        'path' => 'image_upload/js',
        'wrapper' => 'image-attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),
      '#submit' => array('node_form_submit_build_node'),
    );
  }

  // This value is used in image_upload_js().
  $form['current']['vid'] = array('#type' => 'hidden', '#value' => isset($node->vid) ? $node->vid : 0);
  $form['type']= array('#type' => 'hidden', '#value' => $node->type);

  return $form;
}

/**
 * Theme the attachments list.
 *
 * @ingroup themeable
 */
function theme_image_upload_form_current(&$form) {
  $header = array(t('Delete'), t('Preview'), t('Category'), t('Description'), t('Weight')); //, t('Size'));

  $children = element_children($form);
  foreach ($children as $key) {
    $row = array();
    $row[] = drupal_render($form[$key]['remove']);

    if(is_numeric($key)) {
      $row[] = theme('image_upload_image', $form['nid']['#value'], $form[$key]['thumbpath']['#value'], $form[$key]['filepath']['#value'], $form[$key]['description']['#default_value']);
      $row[] = drupal_render($form[$key]['tid']);
    }
    else {
      $row[] = '';
      $row[] = '';
    }

    $row[] = drupal_render($form[$key]['description']);
    $row[] = drupal_render($form[$key]['weight']);
    //$row[] = drupal_render($form[$key]['size']);

    $params = array('data' => $row, 'class' => 'draggable');

    if ($form[$key]['remove']['#default_value']) {
      $params['style'] = 'display:none';
    }

    $rows[] = $params;
  }
  $output = theme('table', $header, $rows, array('id' => 'upload-images'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Theme the attachment form.
 * Note: required to output prefix/suffix.
 *
 * @ingroup themeable
 */
function theme_image_upload_form_new($form) {
  drupal_add_tabledrag('image-upload-attachments', 'order', 'sibling', 'upload-weight');
  $output = drupal_render($form);
  return $output;
}

/**
 * Theme the image. Used in the node add/edit form, and the node page itself
 *
 * @ingroup themeable
 */
function theme_image_upload_image($nid, $thumbpath, $filepath, $caption) {
  list($width, $height, $type, $image_attributes) = @getimagesize($thumbpath);

  $img_tag = '<img src="' . url($thumbpath)  .'" width="' . $width . '" height="' . $height . '" />';
  $options = array(
    'html' => TRUE,
    'attributes' => array('rel' => 'lightbox[' . $nid . '][' . $caption . ']')
  );

  return l($img_tag, $filepath, $options);
}

function image_upload_load($node) {
  $files = array();
  $terms = _image_upload_get_terms();

  if ($node->vid) {
    $result = db_query('SELECT * FROM {files} f INNER JOIN {image_upload} r ON f.fid = r.fid WHERE r.vid = %d ORDER BY r.weight, f.fid', $node->vid);
    while ($file = db_fetch_object($result)) {
      $file->term_name = $terms[$file->tid];
      $file->img_html = theme('image_upload_image', $node->nid, $file->thumbpath, $file->filepath, $file->description);

      $files[$file->fid] = $file;
    }
  }

  return $files;
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function image_upload_js() {
  // Load the form from the Form API cache.
  $cache = cache_get('form_'. $_POST['form_build_id'], 'cache_form');

  // We only do the upload.module part of the node validation process.
  $node = (object)$_POST;
  unset($node->images['upload']);
  $form = $cache->data;
  $form_state = array('values' => $_POST);

  // Handle new uploads, and merge tmp files into node-files.
  image_upload_node_form_submit($form, $form_state);
  $node_files = image_upload_load($node);
  if (!empty($form_state['values']['images'])) {
    foreach ($form_state['values']['images'] as $fid => $file) {
      if (is_numeric($fid)) {
        $node->images[$fid] = $file;
        if (!isset($file['filepath'])) {
          $node->images[$fid] = $node_files[$fid];
        }
      }
    }
  }
  $form = _image_upload_form($node);

  // Update the default values changed in the $_POST array.
  $files = isset($_POST['images']) ? $_POST['images'] : array();
  foreach ($files as $fid => $file) {
    if (is_numeric($fid)) {
      $form['images'][$fid]['description']['#default_value'] = $file['description'];
      $form['images'][$fid]['remove']['#default_value'] = isset($file['remove']) ? 1 : 0;
      $form['images'][$fid]['weight']['#default_value'] = $file['weight'];
      $form['images'][$fid]['tid']['#default_value'] = $file['tid'];
    }
  }

  drupal_alter('form', $form, array(), 'image_upload_js');

  // Add the new element to the stored form state and resave.
  $cache->data['image_uploads']['image_wrapper'] = array_merge($cache->data['image_uploads']['image_wrapper'], $form);
  cache_set('form_'. $_POST['form_build_id'], $cache->data, 'cache_form', $cache->expire);

  // Render the form for output.
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
    '#tree' => FALSE,
    '#parents' => array(),
  );

  $form_state = array('submitted' => FALSE);
  $form = form_builder('image_upload_js', $form, $form_state);
  $output = theme('status_messages') . drupal_render($form);

  // We send the updated file attachments form.
  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.

  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

function image_upload_js_remove() {
  // Load the form from the Form API cache.
  $cache = cache_get('form_'. $_POST['form_build_id'], 'cache_form');

  // We only do the upload.module part of the node validation process.
  $node = (object)$_POST;
  unset($node->images['upload']);
  $form = $cache->data;
  $form_state = array('values' => $_POST);

  // Handle new uploads, and merge tmp files into node-files.
  $node_files = image_upload_load($node);
  if (!empty($form_state['values']['images'])) {
    foreach ($form_state['values']['images'] as $fid => $file) {
      if (is_numeric($fid)) {
        $node->images[$fid] = $file;
        if (!isset($file['filepath'])) {
          $node->images[$fid] = $node_files[$fid];
        }
      }
    }
  }
  $form = _image_upload_form($node);

  // Update the default values changed in the $_POST array.
  $files = isset($_POST['images']) ? $_POST['images'] : array();
  $for_deletion = 0;
  $num_files = 0;

  foreach ($files as $fid => $file) {
    if (is_numeric($fid)) {
      if(isset($file['remove'])) {
        $for_deletion++;
      }

      $form['images'][$fid]['description']['#default_value'] = $file['description'];
      $form['images'][$fid]['remove']['#default_value'] = isset($file['remove']) ? 1 : 0;
      $form['images'][$fid]['weight']['#default_value'] = $file['weight'];
      $form['images'][$fid]['tid']['#default_value'] = $file['tid'];
      $form['images'][$fid]['size']['#value'] = $file['filesize'];

      $num_files++;
    }
  }

  if($for_deletion == $num_files) { // Nothing to see here, move along
    $form['images']['#prefix'] = '<div style="display:none">';
    $form['images']['#suffix'] = '</div>';
  }

  drupal_alter('form', $form, array(), 'image_upload_js');

  // Add the new element to the stored form state and resave.
  $cache->data['image_uploads']['image_wrapper'] = array_merge($cache->data['image_uploads']['image_wrapper'], $form);
  cache_set('form_'. $_POST['form_build_id'], $cache->data, 'cache_form', $cache->expire);

  // Render the form for output.
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
    '#tree' => FALSE,
    '#parents' => array(),
  );

  $form_state = array('submitted' => FALSE);
  $form = form_builder('image_upload_js', $form, $form_state);
  $output = theme('status_messages') . drupal_render($form);

  // We send the updated file attachments form.
  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.

  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

function _image_upload_create_thumbname($filename) {
  return preg_replace('/(.+)\.([a-zA-Z]+)/', '${1}_thumbnail.${2}', $filename);
}

// Expensive.
function _image_upload_form_get_terms($node_type) {
  $terms = _image_upload_get_terms();

  foreach($terms as $tid => $term_name) {
    if(variable_get('image_upload_category_'. $tid .'_'. $node_type, 0)) {
      $terms[$tid] = $term_name;
    }
  }

  return $terms;
}

function _image_upload_get_terms() {
  $terms = array();

  $result = db_query("SELECT vid FROM {vocabulary} WHERE name = 'Image Upload'");
  while ($vocabulary = db_fetch_object($result)) {
    $vid = $vocabulary->vid;
  }

  $result = db_query("SELECT name, tid FROM {term_data} WHERE vid = %d", $vid);

  while ($term = db_fetch_object($result)) {
    $terms[$term->tid] = $term->name;
  }

  return $terms;
}
